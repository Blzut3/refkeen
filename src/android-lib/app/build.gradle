apply plugin: 'com.android.library'

android {
    compileSdkVersion 27
    buildToolsVersion "26.0.1"
    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        externalNativeBuild {
            ndkBuild {
                arguments "APP_PLATFORM=android-14"
            }
        }
        ndk {
            // WARNING: Do *not* change this unless you're sure this is supported
            // by all code pieces, with an emphasis on config header
            // files from the android-lib/app/jni dir
            abiFilters 'armeabi-v7a', 'x86', 'arm64-v8a', 'x86_64'
        }
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets.main {
        jniLibs.srcDir 'libs'
    }
    externalNativeBuild {
        ndkBuild {
            path 'jni/Android.mk'
        }
    }
    lintOptions {
        abortOnError false
    }
    // Ensure the 'release' and 'debug' build variants aren't made together for 'debug' app builds
    publishNonDefault true
    
    libraryVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith(".aar")) {
                def fileName = "org.libsdl.app.aar";
                output.outputFile = new File(outputFile.parent, fileName);
            }
        }
    }
}

dependencies {
    compile 'com.android.support:support-v4:25.3.1'
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile 'junit:junit:4.12'
}
